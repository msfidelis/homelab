{
  "version": 4,
  "terraform_version": "1.10.3",
  "serial": 160,
  "lineage": "3cdc2ab3-cbc5-4615-f7c5-19cae8169bce",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argo_events",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-events",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argo-events",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v1.9.5",
                "chart": "argo-events",
                "first_deployed": 1744249981,
                "last_deployed": 1744249981,
                "name": "argo-events",
                "namespace": "argo-events",
                "notes": "",
                "revision": 1,
                "values": "{}",
                "version": "2.4.14"
              }
            ],
            "name": "argo-events",
            "namespace": "argo-events",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "2.4.14",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argo_rollouts",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-rollouts",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argo-rollouts",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v1.6.4",
                "chart": "argo-rollouts",
                "first_deployed": 1744249983,
                "last_deployed": 1744249983,
                "name": "argo-rollouts",
                "namespace": "argo-rollouts",
                "notes": "",
                "revision": 1,
                "values": "{\"controller\":{\"metrics\":{\"enabled\":true}},\"dashboard\":{\"enabled\":false},\"podAnnotations\":{\"prometheus.io/path\":\"/metrics\",\"prometheus.io/port\":8090,\"prometheus.io/scrape\":true}}",
                "version": "2.34.1"
              }
            ],
            "name": "argo-rollouts",
            "namespace": "argo-rollouts",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "controller.metrics.enabled",
                "type": "",
                "value": "true"
              },
              {
                "name": "dashboard.enabled",
                "type": "",
                "value": "false"
              },
              {
                "name": "podAnnotations.prometheus\\.io/path",
                "type": "",
                "value": "/metrics"
              },
              {
                "name": "podAnnotations.prometheus\\.io/port",
                "type": "",
                "value": "8090"
              },
              {
                "name": "podAnnotations.prometheus\\.io/scrape",
                "type": "",
                "value": "true"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "2.34.1",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argo_workflows",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-workflows",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argo-workflows",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v3.6.5",
                "chart": "argo-workflows",
                "first_deployed": 1744250207,
                "last_deployed": 1744250207,
                "name": "argo-workflows",
                "namespace": "argo-workflows",
                "notes": "\n\n1. Get Argo Server external IP/domain by running:\n\nkubectl --namespace argo-workflows get services -o wide | grep argo-workflows-server\n\n2. Submit the hello-world workflow by running:\n\nargo submit https://raw.githubusercontent.com/argoproj/argo-workflows/master/examples/hello-world.yaml --watch\n",
                "revision": 1,
                "values": "{\"controller\":{\"namespaceParallelism\":10},\"server\":{\"authModes\":[\"server\"]},\"workflow\":{\"serviceAccount\":{\"create\":true}}}",
                "version": "0.45.11"
              }
            ],
            "name": "argo-workflows",
            "namespace": "argo-workflows",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "controller.namespaceParallelism",
                "type": "",
                "value": "10"
              },
              {
                "name": "server.authModes[0]",
                "type": "",
                "value": "server"
              },
              {
                "name": "workflow.serviceAccount.create",
                "type": "",
                "value": "true"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "0.45.11",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-cd",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argocd",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.14.9",
                "chart": "argo-cd",
                "first_deployed": 1744585729,
                "last_deployed": 1744585729,
                "name": "argocd",
                "namespace": "argocd",
                "notes": "\nIn order to access the server UI you have the following options:\n\n1. kubectl port-forward service/argocd-server -n argocd 8080:443\n\n    and then open the browser on http://localhost:8080 and accept the certificate\n\n2. enable ingress in the values file `server.ingress.enabled` and either\n      - Add the annotation for ssl passthrough: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough\n      - Set the `configs.params.\"server.insecure\"` in the values file and terminate SSL at your ingress: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts\n\n\nAfter reaching the UI the first time you can login with username: admin and the random password generated during the installation. You can find the password by running:\n\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n\n(You should delete the initial secret afterwards as suggested by the Getting Started Guide: https://argo-cd.readthedocs.io/en/stable/getting_started/#4-login-using-the-cli)\n",
                "revision": 1,
                "values": "{\"server\":{\"enable\":{\"proxy\":{\"extension\":true}},\"extensions\":{\"enabled\":true,\"extensionList\":[{\"env\":[{\"name\":\"EXTENSION_URL\",\"value\":\"https://github.com/argoproj-labs/rollout-extension/releases/download/v0.3.6/extension.tar\"}],\"name\":\"rollout-extension\"}],\"image\":{\"repository\":\"quay.io/argoprojlabs/argocd-extension-installer\"}},\"extraArgs\":[\"--insecure\"]}}",
                "version": "7.8.24"
              }
            ],
            "name": "argocd",
            "namespace": "argocd",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "server.enable.proxy.extension",
                "type": "",
                "value": "true"
              },
              {
                "name": "server.extensions.enabled",
                "type": "",
                "value": "true"
              },
              {
                "name": "server.extensions.extensionList[0].env[0].name",
                "type": "",
                "value": "EXTENSION_URL"
              },
              {
                "name": "server.extensions.extensionList[0].env[0].value",
                "type": "",
                "value": "https://github.com/argoproj-labs/rollout-extension/releases/download/v0.3.6/extension.tar"
              },
              {
                "name": "server.extensions.extensionList[0].name",
                "type": "",
                "value": "rollout-extension"
              },
              {
                "name": "server.extensions.image.repository",
                "type": "",
                "value": "quay.io/argoprojlabs/argocd-extension-installer"
              },
              {
                "name": "server.extraArgs[0]",
                "type": "",
                "value": "--insecure"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "7.8.24",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.istio_base",
            "helm_release.istio_ingress",
            "helm_release.istiod"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "fluentbit",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "fluent-bit",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "fluent-bit",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "3.2.10",
                "chart": "fluent-bit",
                "first_deployed": 1746043537,
                "last_deployed": 1746043537,
                "name": "fluent-bit",
                "namespace": "fluentbit",
                "notes": "Get Fluent Bit build information by running these commands:\n\nexport POD_NAME=$(kubectl get pods --namespace fluentbit -l \"app.kubernetes.io/name=fluent-bit,app.kubernetes.io/instance=fluent-bit\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl --namespace fluentbit port-forward $POD_NAME 2020:2020\ncurl http://127.0.0.1:2020 \n\n",
                "revision": 1,
                "values": "{\"config\":{\"filters\":\"[FILTER]\\n    Name                kubernetes\\n    Match               kube.*\\n    Kube_URL            https://kubernetes.default.svc:443\\n    Merge_Log           On\\n    K8S-Logging.Parser  On\\n    K8S-Logging.Exclude Off\\n\",\"inputs\":\"[INPUT]\\n    Name              tail\\n    Path              /var/log/containers/*.log\\n    Parser            cri\\n    Tag               kube.*\\n    Mem_Buf_Limit     50MB\\n    Skip_Long_Lines   On\\n    Refresh_Interval  10\\n\",\"outputs\":\"[OUTPUT]\\n    Name              loki\\n    Match             kube.*\\n    Host              loki-gateway.loki.svc.cluster.local\\n    Port              80\\n    tls               off\\n    tls.verify        off\\n    line_format       json\\n    Labels            cluster=homelab,job=fluentbit,namespace=$kubernetes['namespace_name'],pod=$kubernetes['pod_name'],container=$kubernetes['container_name']\\n\",\"service\":\"[SERVICE]\\n    HTTP_Server  On\\n    HTTP_Listen  0.0.0.0\\n    HTTP_PORT    2020\\n    Flush        1\\n    Log_Level    info\\n    Parsers_File parsers.conf\\n\"},\"serviceAccount\":{\"create\":true,\"name\":\"fluent-bit\"}}",
                "version": "0.48.10"
              }
            ],
            "name": "fluent-bit",
            "namespace": "fluentbit",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://fluent.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "serviceAccount:\n  create: true\n  name: fluent-bit\n\nconfig:\n  service: |\n    [SERVICE]\n        HTTP_Server  On\n        HTTP_Listen  0.0.0.0\n        HTTP_PORT    2020\n        Flush        1\n        Log_Level    info\n        Parsers_File parsers.conf\n\n  inputs: |\n    [INPUT]\n        Name              tail\n        Path              /var/log/containers/*.log\n        Parser            cri\n        Tag               kube.*\n        Mem_Buf_Limit     50MB\n        Skip_Long_Lines   On\n        Refresh_Interval  10\n\n  filters: |\n    [FILTER]\n        Name                kubernetes\n        Match               kube.*\n        Kube_URL            https://kubernetes.default.svc:443\n        Merge_Log           On\n        K8S-Logging.Parser  On\n        K8S-Logging.Exclude Off\n\n  outputs: |\n    [OUTPUT]\n        Name              loki\n        Match             kube.*\n        Host              loki-gateway.loki.svc.cluster.local\n        Port              80\n        tls               off\n        tls.verify        off\n        line_format       json\n        Labels            cluster=homelab,job=fluentbit,namespace=$kubernetes['namespace_name'],pod=$kubernetes['pod_name'],container=$kubernetes['container_name']\n"
            ],
            "verify": false,
            "version": "0.48.10",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "grafana",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "grafana",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "grafana",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "11.6.0",
                "chart": "grafana",
                "first_deployed": 1744249987,
                "last_deployed": 1744289216,
                "name": "grafana",
                "namespace": "grafana",
                "notes": "1. Get your 'admin' user password by running:\n\n   kubectl get secret --namespace grafana grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n\n\n2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:\n\n   grafana.grafana.svc.cluster.local\n\n   Get the Grafana URL to visit by running these commands in the same shell:\n     export POD_NAME=$(kubectl get pods --namespace grafana -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana\" -o jsonpath=\"{.items[0].metadata.name}\")\n     kubectl --namespace grafana port-forward $POD_NAME 3000\n\n3. Login with the password from step 1 and the username: admin\n",
                "revision": 2,
                "values": "{\"datasources\":{\"datasources.yaml\":{\"apiVersion\":1,\"datasources\":[{\"access\":\"proxy\",\"isDefault\":true,\"jsonData\":{\"timeInterval\":\"15s\"},\"name\":\"Prometheus\",\"type\":\"prometheus\",\"url\":\"http://prometheus-kube-prometheus-prometheus.prometheus.svc.cluster.local:9090\"},{\"access\":\"proxy\",\"isDefault\":false,\"jsonData\":{\"maxLines\":1000},\"name\":\"Loki\",\"type\":\"loki\",\"url\":\"http://loki-gateway.loki.svc.cluster.local\"}]}},\"persistence\":{\"enabled\":true,\"size\":\"1Gi\"}}",
                "version": "8.11.4"
              }
            ],
            "name": "grafana",
            "namespace": "grafana",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://grafana.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "persistence:\n  enabled: true\n  size: 1Gi\n\ndatasources:\n  datasources.yaml:\n    apiVersion: 1\n    datasources:\n      - name: Prometheus\n        type: prometheus\n        access: proxy\n        url: http://prometheus-kube-prometheus-prometheus.prometheus.svc.cluster.local:9090\n        isDefault: true\n        jsonData:\n          timeInterval: \"15s\"\n\n      - name: Loki\n        type: loki\n        access: proxy\n        url: http://loki-gateway.loki.svc.cluster.local\n        isDefault: false\n        jsonData:\n          maxLines: 1000"
            ],
            "verify": false,
            "version": "8.11.4",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "istio_base",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "base",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "istio-base",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.24.2",
                "chart": "base",
                "first_deployed": 1744250206,
                "last_deployed": 1744250206,
                "name": "istio-base",
                "namespace": "istio-system",
                "notes": "Istio base successfully installed!\n\nTo learn more about the release, try:\n  $ helm status istio-base -n istio-system\n  $ helm get all istio-base -n istio-system\n",
                "revision": 1,
                "values": "{}",
                "version": "1.24.2"
              }
            ],
            "name": "istio-base",
            "namespace": "istio-system",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://istio-release.storage.googleapis.com/charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "1.24.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "istio_ingress",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "gateway",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "istio-ingressgateway",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.24.2",
                "chart": "gateway",
                "first_deployed": 1744250387,
                "last_deployed": 1744250387,
                "name": "istio-ingressgateway",
                "namespace": "istio-system",
                "notes": "\"istio-ingressgateway\" successfully installed!\n\nTo learn more about the release, try:\n  $ helm status istio-ingressgateway -n istio-system\n  $ helm get all istio-ingressgateway -n istio-system\n\nNext steps:\n  * Deploy an HTTP Gateway: https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-control/\n  * Deploy an HTTPS Gateway: https://istio.io/latest/docs/tasks/traffic-management/ingress/secure-ingress/\n",
                "revision": 1,
                "values": "{\"autoscaling\":{\"maxReplicas\":6,\"minReplicas\":2},\"service\":{\"ports\":[{\"name\":\"status-port\",\"nodePort\":30021,\"port\":15021,\"protocol\":\"TCP\",\"targetPort\":15021},{\"name\":\"http2\",\"nodePort\":30080,\"port\":80,\"protocol\":\"TCP\",\"targetPort\":80},{\"name\":\"https\",\"nodePort\":30443,\"port\":443,\"protocol\":\"TCP\",\"targetPort\":443}],\"type\":\"NodePort\"}}",
                "version": "1.24.2"
              }
            ],
            "name": "istio-ingressgateway",
            "namespace": "istio-system",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://istio-release.storage.googleapis.com/charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "autoscaling.maxReplicas",
                "type": "",
                "value": "6"
              },
              {
                "name": "autoscaling.minReplicas",
                "type": "",
                "value": "2"
              },
              {
                "name": "service.ports[0].name",
                "type": "",
                "value": "status-port"
              },
              {
                "name": "service.ports[0].nodePort",
                "type": "",
                "value": "30021"
              },
              {
                "name": "service.ports[0].port",
                "type": "",
                "value": "15021"
              },
              {
                "name": "service.ports[0].protocol",
                "type": "",
                "value": "TCP"
              },
              {
                "name": "service.ports[0].targetPort",
                "type": "",
                "value": "15021"
              },
              {
                "name": "service.ports[1].name",
                "type": "",
                "value": "http2"
              },
              {
                "name": "service.ports[1].nodePort",
                "type": "",
                "value": "30080"
              },
              {
                "name": "service.ports[1].port",
                "type": "",
                "value": "80"
              },
              {
                "name": "service.ports[1].protocol",
                "type": "",
                "value": "TCP"
              },
              {
                "name": "service.ports[1].targetPort",
                "type": "",
                "value": "80"
              },
              {
                "name": "service.ports[2].name",
                "type": "",
                "value": "https"
              },
              {
                "name": "service.ports[2].nodePort",
                "type": "",
                "value": "30443"
              },
              {
                "name": "service.ports[2].port",
                "type": "",
                "value": "443"
              },
              {
                "name": "service.ports[2].protocol",
                "type": "",
                "value": "TCP"
              },
              {
                "name": "service.ports[2].targetPort",
                "type": "",
                "value": "443"
              },
              {
                "name": "service.type",
                "type": "",
                "value": "NodePort"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "1.24.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.istio_base",
            "helm_release.istiod"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "istiod",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "istiod",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "istio",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.24.2",
                "chart": "istiod",
                "first_deployed": 1744250382,
                "last_deployed": 1744250382,
                "name": "istio",
                "namespace": "istio-system",
                "notes": "\"istiod\" successfully installed!\n\nTo learn more about the release, try:\n  $ helm status istio -n istio-system\n  $ helm get all istio -n istio-system\n\nNext steps:\n  * Deploy a Gateway: https://istio.io/latest/docs/setup/additional-setup/gateway/\n  * Try out our tasks to get started on common configurations:\n    * https://istio.io/latest/docs/tasks/traffic-management\n    * https://istio.io/latest/docs/tasks/security/\n    * https://istio.io/latest/docs/tasks/policy-enforcement/\n  * Review the list of actively supported releases, CVE publications and our hardening guide:\n    * https://istio.io/latest/docs/releases/supported-releases/\n    * https://istio.io/latest/news/security/\n    * https://istio.io/latest/docs/ops/best-practices/security/\n\nFor further documentation see https://istio.io website",
                "revision": 1,
                "values": "{\"meshConfig\":{\"defaultConfig\":{\"tracing\":{\"zipkin\":{\"address\":\"jaeger-collector.tracing.svc.cluster.local:9411\"}}},\"enableTracing\":true},\"sidecarInjectorWebhook\":{\"rewriteAppHTTPProbe\":false}}",
                "version": "1.24.2"
              }
            ],
            "name": "istio",
            "namespace": "istio-system",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://istio-release.storage.googleapis.com/charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "meshConfig.defaultConfig.tracing.zipkin.address",
                "type": "",
                "value": "jaeger-collector.tracing.svc.cluster.local:9411"
              },
              {
                "name": "meshConfig.enableTracing",
                "type": "",
                "value": "true"
              },
              {
                "name": "sidecarInjectorWebhook.rewriteAppHTTPProbe",
                "type": "",
                "value": "false"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "1.24.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.istio_base"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "kiali-server",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "kiali-server",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "kiali-server",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.5.0",
                "chart": "kiali-server",
                "first_deployed": 1744250388,
                "last_deployed": 1744250388,
                "name": "kiali-server",
                "namespace": "istio-system",
                "notes": "Welcome to Kiali! For more details on Kiali, see: https://kiali.io\n\nThe Kiali Server [v2.5.0] has been installed in namespace [istio-system]. It will be ready soon.\n\nWhen installing with \"deployment.cluster_wide_access=false\" using this Kiali Server Helm Chart,\nit is your responsibility to manually create the proper Roles and RoleBindings for the Kiali Server\nto have the correct permissions to access the service mesh namespaces.\n\n(Helm: Chart=[kiali-server], Release=[kiali-server], Version=[2.5.0])\n",
                "revision": 1,
                "values": "{\"auth\":{\"strategy\":\"anonymous\"},\"external_services\":{\"grafana\":{\"auth\":{\"insecure_skip_verify\":true,\"password\":\"prom-operator\",\"type\":\"basic\",\"username\":\"admin\"},\"dashboards\":[{\"name\":\"Istio Mesh Dashboard\"},{\"name\":\"Istio Service Dashboard\",\"variables\":{\"namespace\":\"var-namespace\",\"service\":\"var-service\"}},{\"name\":\"Istio Workload Dashboard\",\"variables\":{\"namespace\":\"var-namespace\",\"workload\":\"var-workload\"}},{\"name\":\"Istio Performance Dashboard\"},{\"name\":\"Istio Wasm Extension Dashboard\"}],\"enabled\":true,\"external_url\":\"http://grafana.homelab.msfidelis.com.br\",\"internal_url\":\"http://prometheus-grafana.prometheus.svc.cluster.local:80\"},\"prometheus\":{\"url\":\"http://prometheus-kube-prometheus-prometheus.prometheus.svc.cluster.local:9090\"},\"tracing\":{\"enabled\":true,\"external_url\":\"http://jaeger.homelab.msfidelis.com.br\",\"internal_url\":\"http://jaeger-query.tracing.svc.cluster.local:16686\",\"use_grpc\":false}},\"server\":{\"web_fqdn\":\"kiali.homelab.msfidelis.com.br\"}}",
                "version": "2.5.0"
              }
            ],
            "name": "kiali-server",
            "namespace": "istio-system",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://kiali.org/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [
              {
                "name": "auth.strategy",
                "type": "",
                "value": "anonymous"
              },
              {
                "name": "external_services.grafana.auth.insecure_skip_verify",
                "type": "",
                "value": "true"
              },
              {
                "name": "external_services.grafana.auth.password",
                "type": "",
                "value": "prom-operator"
              },
              {
                "name": "external_services.grafana.auth.type",
                "type": "",
                "value": "basic"
              },
              {
                "name": "external_services.grafana.auth.username",
                "type": "",
                "value": "admin"
              },
              {
                "name": "external_services.grafana.dashboards[0].name",
                "type": "",
                "value": "Istio Mesh Dashboard"
              },
              {
                "name": "external_services.grafana.dashboards[1].name",
                "type": "",
                "value": "Istio Service Dashboard"
              },
              {
                "name": "external_services.grafana.dashboards[1].variables.namespace",
                "type": "",
                "value": "var-namespace"
              },
              {
                "name": "external_services.grafana.dashboards[1].variables.service",
                "type": "",
                "value": "var-service"
              },
              {
                "name": "external_services.grafana.dashboards[2].name",
                "type": "",
                "value": "Istio Workload Dashboard"
              },
              {
                "name": "external_services.grafana.dashboards[2].variables.namespace",
                "type": "",
                "value": "var-namespace"
              },
              {
                "name": "external_services.grafana.dashboards[2].variables.workload",
                "type": "",
                "value": "var-workload"
              },
              {
                "name": "external_services.grafana.dashboards[3].name",
                "type": "",
                "value": "Istio Performance Dashboard"
              },
              {
                "name": "external_services.grafana.dashboards[4].name",
                "type": "",
                "value": "Istio Wasm Extension Dashboard"
              },
              {
                "name": "external_services.grafana.enabled",
                "type": "",
                "value": "true"
              },
              {
                "name": "external_services.grafana.external_url",
                "type": "",
                "value": "http://grafana.homelab.msfidelis.com.br"
              },
              {
                "name": "external_services.grafana.internal_url",
                "type": "",
                "value": "http://prometheus-grafana.prometheus.svc.cluster.local:80"
              },
              {
                "name": "external_services.prometheus.url",
                "type": "",
                "value": "http://prometheus-kube-prometheus-prometheus.prometheus.svc.cluster.local:9090"
              },
              {
                "name": "external_services.tracing.enabled",
                "type": "",
                "value": "true"
              },
              {
                "name": "external_services.tracing.external_url",
                "type": "",
                "value": "http://jaeger.homelab.msfidelis.com.br"
              },
              {
                "name": "external_services.tracing.internal_url",
                "type": "",
                "value": "http://jaeger-query.tracing.svc.cluster.local:16686"
              },
              {
                "name": "external_services.tracing.use_grpc",
                "type": "",
                "value": "false"
              },
              {
                "name": "server.web_fqdn",
                "type": "",
                "value": "kiali.homelab.msfidelis.com.br"
              }
            ],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": null,
            "verify": false,
            "version": "2.5.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.istio_base",
            "helm_release.istiod"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "loki",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "loki",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "loki",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "3.4.2",
                "chart": "loki",
                "first_deployed": 1744287105,
                "last_deployed": 1744294234,
                "name": "loki",
                "namespace": "loki",
                "notes": "\nMinIO can be accessed via port 9000 on the following DNS name from within your cluster:\nloki-minio.loki.cluster.local\n\nTo access MinIO from localhost, run the below commands:\n\n  1. export POD_NAME=$(kubectl get pods --namespace loki -l \"release=loki\" -o jsonpath=\"{.items[0].metadata.name}\")\n\n  2. kubectl port-forward $POD_NAME 9000 --namespace loki\n\nRead more about port forwarding here: http://kubernetes.io/docs/user-guide/kubectl/kubectl_port-forward/\n\nYou can now access MinIO server on http://localhost:9000. Follow the below steps to connect to MinIO server with mc client:\n\n  1. Download the MinIO mc client - https://min.io/docs/minio/linux/reference/minio-mc.html#quickstart\n\n  2. export MC_HOST_loki-minio-local=http://$(kubectl get secret --namespace loki loki-minio -o jsonpath=\"{.data.rootUser}\" | base64 --decode):$(kubectl get secret --namespace loki loki-minio -o jsonpath=\"{.data.rootPassword}\" | base64 --decode)@localhost:9000\n\n  3. mc ls loki-minio-local\n\n\n\n***********************************************************************\n Welcome to Grafana Loki\n Chart version: 6.29.0\n Chart Name: loki\n Loki version: 3.4.2\n***********************************************************************\n\n** Please be patient while the chart is being deployed **\n\nTip:\n\n  Watch the deployment status using the command: kubectl get pods -w --namespace loki\n\nIf pods are taking too long to schedule make sure pod affinity can be fulfilled in the current cluster.\n\n***********************************************************************\nInstalled components:\n***********************************************************************\n* gateway\n* minio\n* read\n* write\n* backend\n\n\n***********************************************************************\nSending logs to Loki\n***********************************************************************\n\nLoki has been configured with a gateway (nginx) to support reads and writes from a single component.\n\nYou can send logs from inside the cluster using the cluster DNS:\n\nhttp://loki-gateway.loki.svc.cluster.local/loki/api/v1/push\n\nYou can test to send data from outside the cluster by port-forwarding the gateway to your local machine:\n\n  kubectl port-forward --namespace loki svc/loki-gateway 3100:80 \u0026\n\nAnd then using http://127.0.0.1:3100/loki/api/v1/push URL as shown below:\n\n```\ncurl -H \"Content-Type: application/json\" -XPOST -s \"http://127.0.0.1:3100/loki/api/v1/push\"  \\\n--data-raw \"{\\\"streams\\\": [{\\\"stream\\\": {\\\"job\\\": \\\"test\\\"}, \\\"values\\\": [[\\\"$(date +%s)000000000\\\", \\\"fizzbuzz\\\"]]}]}\"\n```\n\nThen verify that Loki did receive the data using the following command:\n\n```\ncurl \"http://127.0.0.1:3100/loki/api/v1/query_range\" --data-urlencode 'query={job=\"test\"}' | jq .data.result\n```\n\n***********************************************************************\nConnecting Grafana to Loki\n***********************************************************************\n\nIf Grafana operates within the cluster, you'll set up a new Loki datasource by utilizing the following URL:\n\nhttp://loki-gateway.loki.svc.cluster.local/\n",
                "revision": 4,
                "values": "{\"backend\":{\"replicas\":1},\"chunksCache\":{\"allocatedMemory\":512},\"deploymentMode\":\"SimpleScalable\",\"gateway\":{\"service\":{\"type\":\"ClusterIP\"}},\"loki\":{\"auth_enabled\":false,\"ingester\":{\"chunk_encoding\":\"snappy\"},\"limits_config\":{\"allow_structured_metadata\":true,\"volume_enabled\":true},\"pattern_ingester\":{\"enabled\":true},\"querier\":{\"max_concurrent\":4},\"schemaConfig\":{\"configs\":[{\"from\":\"2024-04-01\",\"index\":{\"period\":\"24h\",\"prefix\":\"loki_index_\"},\"object_store\":\"s3\",\"schema\":\"v13\",\"store\":\"tsdb\"}]}},\"minio\":{\"enabled\":true},\"read\":{\"replicas\":1},\"resultsCache\":{\"enabled\":false},\"sidecar\":{\"rules\":{\"logLevel\":\"DEBUG\"}},\"write\":{\"replicas\":2}}",
                "version": "6.29.0"
              }
            ],
            "name": "loki",
            "namespace": "loki",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://grafana.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "loki:\n  auth_enabled: false\n  schemaConfig:\n    configs:\n      - from: \"2024-04-01\"\n        store: tsdb\n        object_store: s3\n        schema: v13\n        index:\n          prefix: loki_index_\n          period: 24h\n  ingester:\n    chunk_encoding: snappy\n  querier:\n    # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing\n    max_concurrent: 4\n  pattern_ingester:\n    enabled: true\n  limits_config:\n    allow_structured_metadata: true\n    volume_enabled: true\n\ndeploymentMode: SimpleScalable\n\nbackend:\n  replicas: 1\nread:\n  replicas: 1\nwrite:\n  replicas: 2 # To ensure data durability with replication\n\n# Enable minio for storage\nminio:\n  enabled: true\n\nresultsCache:\n  enabled: false\n\nchunksCache:\n  allocatedMemory: 512\n\ngateway:\n  service:\n    type: ClusterIP\n\nsidecar:\n  rules:\n    logLevel: DEBUG"
            ],
            "verify": false,
            "version": "6.29.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "mimir",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "mimir-distributed",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "mimir",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "2.16.0",
                "chart": "mimir-distributed",
                "first_deployed": 1744316293,
                "last_deployed": 1744316293,
                "name": "mimir",
                "namespace": "mimir",
                "notes": "\nWelcome to Grafana Mimir!\nRemote write endpoints for Prometheus or Grafana Agent:\nIngress is not enabled, see the nginx.ingress values.\nFrom inside the cluster:\n  http://mimir-nginx.mimir.svc:80/api/v1/push\n\nRead address, Grafana data source (Prometheus) URL:\nIngress is not enabled, see the nginx.ingress values.\nFrom inside the cluster:\n  http://mimir-nginx.mimir.svc:80/prometheus\n\n**IMPORTANT**: Always consult CHANGELOG.md file at https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/CHANGELOG.md and the deprecation list there to learn about breaking changes that require action during upgrade.\n\nRepo : https://github.com/grafana/rollout-operator\n\nValidation:\n\nCheck the logs of the pod and ensure messages for reconcilliation of the statefulsets are present.\n```\nkubectl logs -n mimir -l app.kubernetes.io/instance=mimir,app.kubernetes.io/name=rollout-operator\n```\nExample log line:\nlevel=debug ts=2022-04-20T13:59:52.783051541Z msg=\"reconciling StatefulSet\" statefulset=mimir-store-gateway-zone-a\n\n\nMinIO can be accessed via port 9000 on the following DNS name from within your cluster:\nmimir-minio.mimir.cluster.local\n\nTo access MinIO from localhost, run the below commands:\n\n  1. export POD_NAME=$(kubectl get pods --namespace mimir -l \"release=mimir\" -o jsonpath=\"{.items[0].metadata.name}\")\n\n  2. kubectl port-forward $POD_NAME 9000 --namespace mimir\n\nRead more about port forwarding here: http://kubernetes.io/docs/user-guide/kubectl/kubectl_port-forward/\n\nYou can now access MinIO server on http://localhost:9000. Follow the below steps to connect to MinIO server with mc client:\n\n  1. Download the MinIO mc client - https://min.io/docs/minio/linux/reference/minio-mc.html#quickstart\n\n  2. export MC_HOST_mimir-minio-local=http://$(kubectl get secret --namespace mimir mimir-minio -o jsonpath=\"{.data.rootUser}\" | base64 --decode):$(kubectl get secret --namespace mimir mimir-minio -o jsonpath=\"{.data.rootPassword}\" | base64 --decode)@localhost:9000\n\n  3. mc ls mimir-minio-local\n\n\n",
                "revision": 1,
                "values": "{}",
                "version": "5.7.0"
              }
            ],
            "name": "mimir",
            "namespace": "mimir",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://grafana.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "# alertmanager:\n#   persistentVolume:\n#     enabled: false\n#   replicas: 1\n#   resources:\n#     limits:\n#       memory: 1.4Gi\n#     # requests:\n#     #   cpu: 1\n#     #   memory: 1Gi\n#   statefulSet:\n#     enabled: false\n\n# compactor:\n#   persistentVolume:\n#     size: 20Gi\n#   resources:\n#     limits:\n#       memory: 2.1Gi\n#     # requests:\n#     #   cpu: 1\n#     #   memory: 1.5Gi\n\n# distributor:\n#   replicas: 2\n#   resources:\n#     limits:\n#       memory: 5.7Gi\n#     # requests:\n#     #   cpu: 2\n#     #   memory: 4Gi\n\n# ingester:\n#   persistentVolume:\n#     size: 50Gi\n#   replicas: 3\n#   resources:\n#     limits:\n#       memory: 12Gi\n#     # requests:\n#     #   cpu: 3.5\n#     #   memory: 8Gi\n\n# admin-cache:\n#   enabled: true\n#   replicas: 1\n\n# chunks-cache:\n#   enabled: true\n#   replicas: 1\n\n# index-cache:\n#   enabled: true\n#   replicas: 1\n\n# metadata-cache:\n#   enabled: true\n#   replicas: 1\n\n# results-cache:\n#   enabled: true\n#   replicas: 1\n\n# minio:\n#   enabled: false\n\n# overrides_exporter:\n#   replicas: 1\n#   resources:\n#     limits:\n#       memory: 128Mi\n#     requests:\n#       cpu: 100m\n#       memory: 128Mi\n\n# querier:\n#   replicas: 1\n#   resources:\n#     limits:\n#       memory: 5.6Gi\n#     # requests:\n#     #   cpu: 2\n#     #   memory: 4Gi\n\n# query_frontend:\n#   replicas: 1\n#   resources:\n#     limits:\n#       memory: 2.8Gi\n#     # requests:\n#     #   cpu: 2\n#     #   memory: 2Gi\n\n# ruler:\n#   replicas: 1\n#   resources:\n#     limits:\n#       memory: 2.8Gi\n#     # requests:\n#     #   cpu: 1\n#     #   memory: 2Gi\n\n# store_gateway:\n#   persistentVolume:\n#     size: 10Gi\n#   replicas: 1\n#   resources:\n#     limits:\n#       memory: 2.1Gi\n#     # requests:\n#     #   cpu: 1\n#     #   memory: 1.5Gi\n\n# nginx:\n#   replicas: 1\n#   resources:\n#     limits:\n#       memory: 731Mi\n#     requests:\n#       cpu: 1\n#       memory: 512Mi\n\n# # Grafana Enterprise Metrics feature related\n# admin_api:\n#   replicas: 1\n#   resources:\n#     limits:\n#       memory: 128Mi\n#     # requests:\n#     #   cpu: 100m\n#     #   memory: 64Mi\n\n# gateway:\n#   replicas: 1\n#   resources:\n#     limits:\n#       memory: 731Mi\n#     # requests:\n#     #   cpu: 1\n#     #   memory: 512Mi"
            ],
            "verify": false,
            "version": "5.7.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "otel",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "opentelemetry-collector",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "opentelemetry-collector",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "0.122.1",
                "chart": "opentelemetry-collector",
                "first_deployed": 1744308747,
                "last_deployed": 1744308747,
                "name": "opentelemetry-collector",
                "namespace": "opentelemetry",
                "notes": "\n\n\n[WARNING] No resource limits or requests were set. Consider setter resource requests and limits for your collector(s) via the `resources` field.\n\n[WARNING] \"useGOMEMLIMIT\" is enabled but memory limits have not been supplied so the GOMEMLIMIT env var could not be added. Solve this problem by setting resources.limits.memory or disabling useGOMEMLIMIT\n\n",
                "revision": 1,
                "values": "{\"config\":{\"exporters\":{\"otlphttp\":{\"endpoint\":\"http://tempo-gateway.tempo.svc.cluster.local:80\",\"tls\":{\"insecure\":true}}},\"processors\":{\"batch\":{}},\"receivers\":{\"otlp\":{\"protocols\":{\"grpc\":{\"endpoint\":\"0.0.0.0:4317\"},\"http\":{\"endpoint\":\"0.0.0.0:4318\"}}},\"zipkin\":{}},\"service\":{\"pipelines\":{\"traces\":{\"exporters\":[\"otlphttp\"],\"processors\":[\"batch\"],\"receivers\":[\"otlp\",\"zipkin\"]}}}},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"otel/opentelemetry-collector-k8s\"},\"mode\":\"deployment\"}",
                "version": "0.120.2"
              }
            ],
            "name": "opentelemetry-collector",
            "namespace": "opentelemetry",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://open-telemetry.github.io/opentelemetry-helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "mode: deployment\n\nimage:\n  repository: otel/opentelemetry-collector-k8s\n  pullPolicy: IfNotPresent\n\nconfig:\n  receivers:\n    otlp:\n      protocols:\n        grpc:\n          endpoint: 0.0.0.0:4317\n        http:\n          endpoint: 0.0.0.0:4318\n    zipkin: {}\n\n  processors:\n    batch: {}\n\n  exporters:\n    otlphttp:\n      endpoint: \"http://tempo-gateway.tempo.svc.cluster.local:80\"\n      tls:\n        insecure: true\n\n  service:\n    pipelines:\n      traces:\n        receivers: [otlp, zipkin]\n        processors: [batch]\n        exporters: [otlphttp]"
            ],
            "verify": false,
            "version": "0.120.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "prometheus",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "kube-prometheus-stack",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "prometheus",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v0.63.0",
                "chart": "kube-prometheus-stack",
                "first_deployed": 1744249983,
                "last_deployed": 1744249983,
                "name": "prometheus",
                "namespace": "prometheus",
                "notes": "1. Get your 'admin' user password by running:\n\n   kubectl get secret --namespace prometheus prometheus-grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n\n\n2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:\n\n   prometheus-grafana.prometheus.svc.cluster.local\n\n   Get the Grafana URL to visit by running these commands in the same shell:\n     export POD_NAME=$(kubectl get pods --namespace prometheus -l \"app.kubernetes.io/name=grafana,app.kubernetes.io/instance=prometheus\" -o jsonpath=\"{.items[0].metadata.name}\")\n     kubectl --namespace prometheus port-forward $POD_NAME 3000\n\n3. Login with the password from step 1 and the username: admin\n\nkube-prometheus-stack has been installed. Check its status by running:\n  kubectl --namespace prometheus get pods -l \"release=prometheus\"\n\nVisit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026 configure Alertmanager and Prometheus instances using the Operator.\n\nkube-state-metrics is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects.\nThe exposed metrics can be found here:\nhttps://github.com/kubernetes/kube-state-metrics/blob/master/docs/README.md#exposed-metrics\n\nThe metrics are exported on the HTTP endpoint /metrics on the listening port.\nIn your case, prometheus-kube-state-metrics.prometheus.svc.cluster.local:8080/metrics\n\nThey are served either as plaintext or protobuf depending on the Accept header.\nThey are designed to be consumed either by Prometheus itself or by a scraper that is compatible with scraping a Prometheus client endpoint.\n\n1. Get the application URL by running these commands:\n  export POD_NAME=$(kubectl get pods --namespace prometheus -l \"app.kubernetes.io/name=prometheus-node-exporter,app.kubernetes.io/instance=prometheus\" -o jsonpath=\"{.items[0].metadata.name}\")\n  echo \"Visit http://127.0.0.1:9100 to use your application\"\n  kubectl port-forward --namespace prometheus $POD_NAME 9100",
                "revision": 1,
                "values": "{\"grafana\":{\"persistence\":{\"accessModes\":[\"ReadWriteOnce\"],\"enabled\":true,\"size\":\"1Gi\",\"storageClassName\":\"local-path\"}},\"kubeStateMetrics\":{\"enabled\":true},\"prometheus\":{\"prometheusSpec\":{\"podMonitorNamespaceSelector\":{},\"podMonitorSelector\":{},\"podMonitorSelectorNilUsesHelmValues\":false,\"ruleNamespaceSelector\":{},\"ruleSelector\":{},\"ruleSelectorNilUsesHelmValues\":false,\"serviceMonitorNamespaceSelector\":{},\"serviceMonitorSelector\":{},\"serviceMonitorSelectorNilUsesHelmValues\":false}},\"prometheusOperator\":{\"alertmanagerInstanceNamespaces\":\"\",\"denyNamespaces\":\"\",\"enabled\":true,\"namespaces\":\"\",\"prometheusInstanceNamespaces\":\"\",\"thanosRulerInstanceNamespaces\":\"\"}}",
                "version": "45.8.0"
              }
            ],
            "name": "prometheus",
            "namespace": "prometheus",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://prometheus-community.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "prometheus:\n  prometheusSpec:\n    podMonitorNamespaceSelector: {}\n    podMonitorSelector: {}\n    podMonitorSelectorNilUsesHelmValues: false\n    ruleNamespaceSelector: {}\n    ruleSelector: {}\n    ruleSelectorNilUsesHelmValues: false\n    serviceMonitorNamespaceSelector: {}\n    serviceMonitorSelector: {}\n    serviceMonitorSelectorNilUsesHelmValues: false\n\nkubeStateMetrics:\n  enabled: true\n\nprometheusOperator:\n  enabled: true\n  namespaces: ''\n  denyNamespaces: ''\n  prometheusInstanceNamespaces: ''\n  alertmanagerInstanceNamespaces: ''\n  thanosRulerInstanceNamespaces: ''\n\ngrafana:\n  persistence:\n    enabled: true\n    storageClassName: \"local-path\"\n    accessModes:\n      - ReadWriteOnce\n    size: 1Gi"
            ],
            "verify": false,
            "version": "45.8.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "tempo",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "tempo-distributed",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "tempo",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "2.6.0",
                "chart": "tempo-distributed",
                "first_deployed": 1744298111,
                "last_deployed": 1746046533,
                "name": "tempo",
                "namespace": "tempo",
                "notes": "***********************************************************************\n Welcome to Grafana Tempo\n Chart version: 1.20.0\n Tempo version: 2.6.0\n***********************************************************************\n\nInstalled components:\n* ingester\n* distributor\n* querier\n* query-frontend\n* compactor\n* memcached\n* gateway",
                "revision": 10,
                "values": "{\"distributor\":{\"enabled\":true},\"gateway\":{\"enabled\":true},\"global_overrides\":{\"metrics_generator_processors\":[\"service-graphs\",\"span-metrics\"]},\"metricsGenerator\":{\"config\":{\"storage\":{\"remote_write\":[{\"send_exemplars\":true,\"url\":\"http://prometheus-kube-prometheus-prometheus.prometheus.svc.cluster.local:9090/api/v1/write\"}]}},\"enabled\":true,\"registry\":{\"external_labels\":{\"source\":\"tempo\"}}},\"queryFrontend\":{\"query\":{\"enabled\":false}},\"traces\":{\"otlp\":{\"grpc\":{\"enabled\":true},\"http\":{\"enabled\":true}}}}",
                "version": "1.20.0"
              }
            ],
            "name": "tempo",
            "namespace": "tempo",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://grafana.github.io/helm-charts",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "gateway:\n  enabled: true\n\nqueryFrontend:\n  query:\n    enabled: false\n\ndistributor:\n  enabled: true\n\n\nmetricsGenerator:\n  enabled: true\n  registry:\n    external_labels:\n      source: tempo\n  config: \n    storage:\n      remote_write: \n      - url: \"http://prometheus-kube-prometheus-prometheus.prometheus.svc.cluster.local:9090/api/v1/write\"\n        send_exemplars: true\nglobal_overrides:\n  metrics_generator_processors: [service-graphs, span-metrics]\n\ntraces:\n  otlp:\n    http:\n      enabled: true\n    grpc:\n      enabled: true"
            ],
            "verify": false,
            "version": "1.20.0",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "repository_password"
              }
            ]
          ],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "argo_events_event_bus",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "argoproj.io/v1alpha1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/argoproj.io/v1alpha1/namespaces/argo-events/eventbuses/default",
            "ignore_fields": null,
            "kind": "EventBus",
            "live_manifest_incluster": "5f0ca6518b23029a7ffca57697205e31214ea460a55bad071f78ab046a1c1125",
            "live_uid": "0605139c-96df-4032-bc89-0e4d48bd1dd1",
            "name": "default",
            "namespace": "argo-events",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "0605139c-96df-4032-bc89-0e4d48bd1dd1",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: argoproj.io/v1alpha1\nkind: EventBus\nmetadata:\n  name: default\n  namespace: argo-events\nspec:\n  jetstream:\n    version: latest\n",
            "yaml_body_parsed": "apiVersion: argoproj.io/v1alpha1\nkind: EventBus\nmetadata:\n  name: default\n  namespace: argo-events\nspec:\n  jetstream:\n    version: latest\n",
            "yaml_incluster": "5f0ca6518b23029a7ffca57697205e31214ea460a55bad071f78ab046a1c1125"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argo_events"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "argo_events_role",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/namespaces/argocd/roles/argo-events-operation-role",
            "ignore_fields": null,
            "kind": "Role",
            "live_manifest_incluster": "8665ceefb666369022c7218ae29dd1d7361691725a802f9d012718872d980ede",
            "live_uid": "6e5632c8-71b9-4371-a6c3-b7d5f4845b40",
            "name": "argo-events-operation-role",
            "namespace": "argocd",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "6e5632c8-71b9-4371-a6c3-b7d5f4845b40",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: argo-events-operation-role\n  namespace: argocd\nrules:\n  - apiGroups: [\"argoproj.io\"]\n    resources: [\"applicationsets\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"argoproj.io\"]\n    resources: [\"workflows\"]\n    verbs: [\"*\"]\n",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: argo-events-operation-role\n  namespace: argocd\nrules:\n- apiGroups:\n  - argoproj.io\n  resources:\n  - applicationsets\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - argoproj.io\n  resources:\n  - workflows\n  verbs:\n  - '*'\n",
            "yaml_incluster": "8665ceefb666369022c7218ae29dd1d7361691725a802f9d012718872d980ede"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argo_events"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "argo_events_role_binding",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/namespaces/argocd/rolebindings/argo-events-operation-role-binding",
            "ignore_fields": null,
            "kind": "RoleBinding",
            "live_manifest_incluster": "e3e88bfec7dcaed9b1f327b84c1c0eac00cd6f1aa9d615dfb7eacbfb24668ad9",
            "live_uid": "04748649-fbb0-4084-8cee-19a64c9beb0b",
            "name": "argo-events-operation-role-binding",
            "namespace": "argocd",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "04748649-fbb0-4084-8cee-19a64c9beb0b",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: argo-events-operation-role-binding\n  namespace: argocd\nsubjects:\n  - kind: ServiceAccount\n    name: default\n    namespace: argo-events\nroleRef:\n  kind: Role\n  name: argo-events-operation-role\n  apiGroup: rbac.authorization.k8s.io\n",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: argo-events-operation-role-binding\n  namespace: argocd\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: argo-events-operation-role\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: argo-events\n",
            "yaml_incluster": "e3e88bfec7dcaed9b1f327b84c1c0eac00cd6f1aa9d615dfb7eacbfb24668ad9"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argo_events",
            "kubectl_manifest.argo_events_role"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "argo_events_workflow_role",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/namespaces/argo-workflows/roles/argo-events-operation-workflows-role",
            "ignore_fields": null,
            "kind": "Role",
            "live_manifest_incluster": "89e53604f800b1da0ec6a0f414a023b80e0ce2a33aedf4e8c98d3b4cc9ab785e",
            "live_uid": "0c8d8b71-5614-407a-9bf3-8875f6296e9a",
            "name": "argo-events-operation-workflows-role",
            "namespace": "argo-workflows",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "0c8d8b71-5614-407a-9bf3-8875f6296e9a",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: argo-events-operation-workflows-role\n  namespace: argo-workflows\nrules:\n  - apiGroups: [\"argoproj.io\"]\n    resources: [\"workflows\"]\n    verbs: [\"*\"]\n",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: argo-events-operation-workflows-role\n  namespace: argo-workflows\nrules:\n- apiGroups:\n  - argoproj.io\n  resources:\n  - workflows\n  verbs:\n  - '*'\n",
            "yaml_incluster": "89e53604f800b1da0ec6a0f414a023b80e0ce2a33aedf4e8c98d3b4cc9ab785e"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argo_events"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "argo_events_workflow_role_binding",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "rbac.authorization.k8s.io/v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/rbac.authorization.k8s.io/v1/namespaces/argo-workflows/rolebindings/argo-events-operation-workflows-role-binding",
            "ignore_fields": null,
            "kind": "RoleBinding",
            "live_manifest_incluster": "d8c5a3a7ca92d68014d729219085914741beb89af78ed77714b424ce53095749",
            "live_uid": "1ed1e189-2352-4a57-b680-e9211591b88a",
            "name": "argo-events-operation-workflows-role-binding",
            "namespace": "argo-workflows",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "1ed1e189-2352-4a57-b680-e9211591b88a",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: argo-events-operation-workflows-role-binding\n  namespace: argo-workflows\nsubjects:\n  - kind: ServiceAccount\n    name: default\n    namespace: argo-events\nroleRef:\n  kind: Role\n  name: argo-events-operation-workflows-role\n  apiGroup: rbac.authorization.k8s.io\n",
            "yaml_body_parsed": "apiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: argo-events-operation-workflows-role-binding\n  namespace: argo-workflows\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: argo-events-operation-workflows-role\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: argo-events\n",
            "yaml_incluster": "d8c5a3a7ca92d68014d729219085914741beb89af78ed77714b424ce53095749"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argo_events",
            "kubectl_manifest.argo_events_workflow_role"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "argo_gateway",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "networking.istio.io/v1alpha3",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/networking.istio.io/v1alpha3/namespaces/argocd/gateways/argocd-gateway",
            "ignore_fields": null,
            "kind": "Gateway",
            "live_manifest_incluster": "4a7fc6319469db7f0bc092bfc984033b33743754c62a22b5f8bcda9d68d49960",
            "live_uid": "80c37cc7-be15-4453-9b6e-060e336b9e68",
            "name": "argocd-gateway",
            "namespace": "argocd",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "80c37cc7-be15-4453-9b6e-060e336b9e68",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: argocd-gateway\n  namespace: argocd\nspec:\n  selector:\n    istio: ingressgateway \n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - argocd.homelab.msfidelis.com.br\n",
            "yaml_body_parsed": "apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: argocd-gateway\n  namespace: argocd\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - argocd.homelab.msfidelis.com.br\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n",
            "yaml_incluster": "4a7fc6319469db7f0bc092bfc984033b33743754c62a22b5f8bcda9d68d49960"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argocd",
            "helm_release.istio_base",
            "helm_release.istio_ingress",
            "helm_release.istiod"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "argo_workflows_gateway",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "networking.istio.io/v1alpha3",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/networking.istio.io/v1alpha3/namespaces/argo-workflows/gateways/argo-workflows-server",
            "ignore_fields": null,
            "kind": "Gateway",
            "live_manifest_incluster": "0a3f0a85a2e27f632a384389a36aecae206f605e7553303e3d5e25796c39fe45",
            "live_uid": "ed3fea75-0783-4da1-84f6-2e437e8da588",
            "name": "argo-workflows-server",
            "namespace": "argo-workflows",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "ed3fea75-0783-4da1-84f6-2e437e8da588",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: argo-workflows-server\n  namespace: argo-workflows\nspec:\n  selector:\n    istio: ingressgateway \n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - argo-workflows.homelab.msfidelis.com.br\n",
            "yaml_body_parsed": "apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: argo-workflows-server\n  namespace: argo-workflows\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - argo-workflows.homelab.msfidelis.com.br\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n",
            "yaml_incluster": "0a3f0a85a2e27f632a384389a36aecae206f605e7553303e3d5e25796c39fe45"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argo_workflows"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "argo_workflows_virtual_service",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "networking.istio.io/v1alpha3",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/networking.istio.io/v1alpha3/namespaces/argo-workflows/virtualservices/argo-workflows-server",
            "ignore_fields": null,
            "kind": "VirtualService",
            "live_manifest_incluster": "e3c3657a83107af2f39809be713bc2978dd1b6b7481b703de2437a719e7dfb41",
            "live_uid": "87a98952-9244-4f6f-8e0a-fea67fe55c16",
            "name": "argo-workflows-server",
            "namespace": "argo-workflows",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "87a98952-9244-4f6f-8e0a-fea67fe55c16",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: argo-workflows-server\n  namespace: argo-workflows\nspec:\n  hosts:\n  - argo-workflows.homelab.msfidelis.com.br\n  gateways:\n  -  argo-workflows-server\n  http:\n  - match:\n    - uri:\n        prefix: /\n    route:\n    - destination:\n        host: argo-workflows-server\n        port:\n          number: 2746\n",
            "yaml_body_parsed": "apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: argo-workflows-server\n  namespace: argo-workflows\nspec:\n  gateways:\n  - argo-workflows-server\n  hosts:\n  - argo-workflows.homelab.msfidelis.com.br\n  http:\n  - match:\n    - uri:\n        prefix: /\n    route:\n    - destination:\n        host: argo-workflows-server\n        port:\n          number: 2746\n",
            "yaml_incluster": "e3c3657a83107af2f39809be713bc2978dd1b6b7481b703de2437a719e7dfb41"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argo_workflows"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "argocd_virtual_service",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "networking.istio.io/v1alpha3",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/networking.istio.io/v1alpha3/namespaces/argocd/virtualservices/argo-server",
            "ignore_fields": null,
            "kind": "VirtualService",
            "live_manifest_incluster": "1d58f0419441f1c2f4cb093c8805518b4eb18b6f6b16a2867b37faaf376ee333",
            "live_uid": "fd36567e-57c2-4d8f-9590-b3ffa9f3b5f4",
            "name": "argo-server",
            "namespace": "argocd",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "fd36567e-57c2-4d8f-9590-b3ffa9f3b5f4",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: argo-server\n  namespace: argocd\nspec:\n  hosts:\n  - argocd.homelab.msfidelis.com.br\n  gateways:\n  - argocd-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /\n    route:\n    - destination:\n        host: argocd-server\n        port:\n          number: 80\n",
            "yaml_body_parsed": "apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: argo-server\n  namespace: argocd\nspec:\n  gateways:\n  - argocd-gateway\n  hosts:\n  - argocd.homelab.msfidelis.com.br\n  http:\n  - match:\n    - uri:\n        prefix: /\n    route:\n    - destination:\n        host: argocd-server\n        port:\n          number: 80\n",
            "yaml_incluster": "1d58f0419441f1c2f4cb093c8805518b4eb18b6f6b16a2867b37faaf376ee333"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.argocd",
            "helm_release.istio_base",
            "helm_release.istio_ingress",
            "helm_release.istiod"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "grafana_gateway",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "networking.istio.io/v1alpha3",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/networking.istio.io/v1alpha3/namespaces/grafana/gateways/grafana",
            "ignore_fields": null,
            "kind": "Gateway",
            "live_manifest_incluster": "545f724e05a2685afb58aac38456fd268cf57e0f78886620515980e47094a5cd",
            "live_uid": "942cc81c-9027-4478-9747-137f48c1d43a",
            "name": "grafana",
            "namespace": "grafana",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "942cc81c-9027-4478-9747-137f48c1d43a",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: grafana\n  namespace: grafana\nspec:\n  selector:\n    istio: ingressgateway \n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - grafana-stack.homelab.msfidelis.com.br\n",
            "yaml_body_parsed": "apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: grafana\n  namespace: grafana\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - grafana-stack.homelab.msfidelis.com.br\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n",
            "yaml_incluster": "545f724e05a2685afb58aac38456fd268cf57e0f78886620515980e47094a5cd"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.grafana"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "grafana_virtual_service",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "networking.istio.io/v1alpha3",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/networking.istio.io/v1alpha3/namespaces/grafana/virtualservices/grafana",
            "ignore_fields": null,
            "kind": "VirtualService",
            "live_manifest_incluster": "af89723a2029fd3a8748eda3af9c7f43c13d8ae7beaf4da2fbd9b060d990aa45",
            "live_uid": "9b587240-427b-41c1-92fb-d16a68b22d9a",
            "name": "grafana",
            "namespace": "grafana",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "9b587240-427b-41c1-92fb-d16a68b22d9a",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: grafana\n  namespace: grafana\nspec:\n  hosts:\n  - grafana-stack.homelab.msfidelis.com.br\n  gateways:\n  -  grafana\n  http:\n  - match:\n    - uri:\n        prefix: /\n    route:\n    - destination:\n        host: grafana\n        port:\n          number: 80\n",
            "yaml_body_parsed": "apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: grafana\n  namespace: grafana\nspec:\n  gateways:\n  - grafana\n  hosts:\n  - grafana-stack.homelab.msfidelis.com.br\n  http:\n  - match:\n    - uri:\n        prefix: /\n    route:\n    - destination:\n        host: grafana\n        port:\n          number: 80\n",
            "yaml_incluster": "af89723a2029fd3a8748eda3af9c7f43c13d8ae7beaf4da2fbd9b060d990aa45"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.grafana"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "kiali_gateway",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "networking.istio.io/v1alpha3",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/networking.istio.io/v1alpha3/namespaces/istio-system/gateways/kiali-gateway",
            "ignore_fields": null,
            "kind": "Gateway",
            "live_manifest_incluster": "49ecbdb8c992033df643f09e4545164239aeee0808a19006fed9334d147fbad6",
            "live_uid": "f61bbe4b-0ad5-4a18-bd88-24c2e2bd116a",
            "name": "kiali-gateway",
            "namespace": "istio-system",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "f61bbe4b-0ad5-4a18-bd88-24c2e2bd116a",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: kiali-gateway\n  namespace: istio-system\nspec:\n  selector:\n    istio: ingressgateway \n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - kiali.homelab.msfidelis.com.br\n",
            "yaml_body_parsed": "apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: kiali-gateway\n  namespace: istio-system\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - hosts:\n    - kiali.homelab.msfidelis.com.br\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n",
            "yaml_incluster": "49ecbdb8c992033df643f09e4545164239aeee0808a19006fed9334d147fbad6"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.istio_base",
            "helm_release.istiod",
            "helm_release.kiali-server"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "kiali_virtual_service",
      "provider": "provider[\"registry.terraform.io/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "networking.istio.io/v1alpha3",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/networking.istio.io/v1alpha3/namespaces/istio-system/virtualservices/kiali",
            "ignore_fields": null,
            "kind": "VirtualService",
            "live_manifest_incluster": "158eefe71f77a4a0465028100c0caee3314cf719c4b22a53d8a29282cba9bb76",
            "live_uid": "7f73ab9a-4882-41b6-9062-044f0b231a9f",
            "name": "kiali",
            "namespace": "istio-system",
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "7f73ab9a-4882-41b6-9062-044f0b231a9f",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: kiali\n  namespace: istio-system\nspec:\n  hosts:\n  - kiali.homelab.msfidelis.com.br\n  gateways:\n  - kiali-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /\n    route:\n    - destination:\n        host: kiali\n        port:\n          number: 20001\n",
            "yaml_body_parsed": "apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: kiali\n  namespace: istio-system\nspec:\n  gateways:\n  - kiali-gateway\n  hosts:\n  - kiali.homelab.msfidelis.com.br\n  http:\n  - match:\n    - uri:\n        prefix: /\n    route:\n    - destination:\n        host: kiali\n        port:\n          number: 20001\n",
            "yaml_incluster": "158eefe71f77a4a0465028100c0caee3314cf719c4b22a53d8a29282cba9bb76"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "yaml_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "live_manifest_incluster"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "yaml_body"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "helm_release.istio_base",
            "helm_release.istiod",
            "helm_release.kiali-server"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
